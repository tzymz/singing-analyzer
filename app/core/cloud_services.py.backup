import oss2
import uuid
import json
import requests
import base64
import hashlib
import hmac
import time
import io
from typing import Dict, Any
from pydub import AudioSegment
from app.core.real_asr_service import RealASRService

class CloudServiceManager:
    def __init__(self, settings):
        self.settings = settings
        self.fallback_mode = True
        
        print("🔄 正在初始化阿里云服务...")
        
        # OSS连接
        if (settings.ALIYUN_ACCESS_KEY_ID and 
            settings.ALIYUN_ACCESS_KEY_SECRET and
            "test" not in settings.ALIYUN_ACCESS_KEY_ID.lower()):
            
            try:
                print("📡 尝试连接阿里云OSS...")
                self.oss_auth = oss2.Auth(
                    settings.ALIYUN_ACCESS_KEY_ID,
                    settings.ALIYUN_ACCESS_KEY_SECRET
                )
                self.oss_bucket = oss2.Bucket(
                    self.oss_auth,
                    settings.ALIYUN_OSS_ENDPOINT,
                    settings.ALIYUN_OSS_BUCKET
                )
                
                # 测试连接
                bucket_info = self.oss_bucket.get_bucket_info()
                self.fallback_mode = False
                print(f"✅ 阿里云OSS连接成功！")
                
                # 初始化ASR服务
                if hasattr(settings, 'ALIYUN_ASR_API_KEY') and settings.ALIYUN_ASR_API_KEY:
                    self.asr_service = RealASRService(api_key=settings.ALIYUN_ASR_API_KEY)
                    print("🎤 Fun-ASR服务初始化完成 - 准备真实AI分析")
                else:
                    print("⚠️ 未找到ASR API Key，使用模拟模式")
                
            except Exception as e:
                print(f"❌ 连接失败: {e}")
        else:
            print("ℹ️ 使用模拟模式运行")
async def upload_audio(self, audio_data: bytes) -> str:
    if self.fallback_mode:
        print(f"📤 模拟上传音频，大小: {len(audio_data)} 字节")
        return f"https://example.com/audio-{uuid.uuid4()}.wav"
    else:
        try:
            file_name = f"audios/{uuid.uuid4()}.wav"
            print(f"📤 正在上传到阿里云OSS: {file_name}")
            
            result = self.oss_bucket.put_object(file_name, audio_data)
            
            if result.status == 200:
                # 🔥 修改这里：生成带签名的临时URL（1小时有效）
                signed_url = self.oss_bucket.sign_url('GET', file_name, 3600)
                print(f"✅ 上传成功，生成签名URL: {signed_url[:80]}...")
                return signed_url
            else:
                raise Exception(f"上传失败，状态码: {result.status}")
                    
        except Exception as e:
            print(f"❌ 上传失败: {e}")
            self.fallback_mode = True
            return await self.upload_audio(audio_data)    
        # 如果有真实的ASR服务，尝试真实分析
        if hasattr(self, 'asr_service') and not self.fallback_mode:
            try:
                print("🎤 调用真实Fun-ASR API...")
                
                # 1. 语音转写
                transcription_result = await self.asr_service.transcribe_audio(audio_url)
                
                # 2. 基于转写结果生成唱歌分析
                analysis_result = await self.asr_service.analyze_singing_from_transcription(transcription_result)
                
                print("🎉 真实AI分析完成！")
                return analysis_result
                
            except Exception as e:
                print(f"❌ 真实API分析失败: {e}")
                print("🔄 回退到增强模拟分析")
        
        print("🔄 使用增强模拟分析")
        return await self._enhanced_analysis()
    
    async def _enhanced_analysis(self) -> Dict[str, Any]:
        """增强版模拟分析"""
        import random
        import time
        
        time.sleep(1.5)
        
        pitch_score = round(random.uniform(0.6, 0.95), 2)
        rhythm_score = round(random.uniform(0.65, 0.92), 2)
        
        return {
            "pronunciation": {
                "score": pitch_score,
                "accuracy": round(random.uniform(0.7, 0.9), 2),
                "detail": self._get_pitch_feedback(pitch_score)
            },
            "rhythm": {
                "score": rhythm_score,
                "stability": round(random.uniform(0.6, 0.88), 2),
                "detail": self._get_rhythm_feedback(rhythm_score)
            },
            "completeness": round(random.uniform(0.8, 0.98), 2),
            "fluency": round(random.uniform(0.75, 0.95), 2),
            "overall_score": round((pitch_score + rhythm_score) * 50, 1),
            "analysis_id": str(uuid.uuid4()),
            "mode": "enhanced_simulation"
        }
    
    def _get_pitch_feedback(self, score: float) -> str:
        if score >= 0.9: return "音准优秀，音高控制精准稳定"
        elif score >= 0.8: return "音准良好，高音区可更稳定"
        elif score >= 0.7: return "音准需练习，建议音阶训练"
        else: return "音准需重点训练，从基础开始"
    
    def _get_rhythm_feedback(self, score: float) -> str:
        if score >= 0.85: return "节奏感优秀，节拍精准"
        elif score >= 0.75: return "节奏良好，复杂节奏需加强"
        elif score >= 0.65: return "节奏需练习，建议节拍器训练"
        else: return "节奏感需重点训练"


